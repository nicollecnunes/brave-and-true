; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/nicolle.nunes/dev/nu/brave-and-true ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless ; popd
(); Using host:port 127.0.0.1:50016 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉brave-and-true.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉brave-and-true.core꞉> 
(using 'brave-and-true.namefy)
; Syntax error compiling at (.calva/output-window/output.calva-repl:26:1).
; Unable to resolve symbol: using in this context
clj꞉brave-and-true.core꞉> 
(require 'brave-and-true.namefy)
nil
clj꞉brave-and-true.core꞉> 
(get-name-by-mail "nico@gmail.com")
; Syntax error compiling at (.calva/output-window/output.calva-repl:33:1).
; Unable to resolve symbol: get-name-by-mail in this context
clj꞉brave-and-true.core꞉> 
(ns brave-and-true.namefy
  (:require [clojure.string :as s]))

(defn get-name-by-mail
  [mail]
  (-> mail
      (s/split #"@")))
; Syntax error compiling at (.calva/output-window/output.calva-repl:43:7).
; No such namespace: s
clj꞉brave-and-true.core꞉> 
(:require [clojure.string])
; Syntax error (ClassNotFoundException) compiling at (.calva/output-window/output.calva-repl:47:1).
; clojure.string
clj꞉brave-and-true.core꞉> 
(defn get-name-by-mail
  [mail]
  (-> mail
      (clojure.string/split #"@")))
#'brave-and-true.core/get-name-by-mail
clj꞉brave-and-true.core꞉> 
(get-name-by-mail "nico@oi.com")
["nico" "oi.com"]
clj꞉brave-and-true.core꞉> 
(defn get-name-by-mail-tf
  [mail]
  (-> mail
      (clojure.string/split ,,, #"@")
      first))
#'brave-and-true.core/get-name-by-mail-tf
clj꞉brave-and-true.core꞉> 
(get-name-by-mail-tf "nico.@oi")
"nico."
clj꞉brave-and-true.core꞉> 
(defn get-name-by-mail
  [mail]
  ((first (clojure.string/split mail #"@"))))
#'brave-and-true.core/get-name-by-mail
clj꞉brave-and-true.core꞉> 
(get-name-by-mail "nico@oi.com")
; Execution error (ClassCastException) at brave-and-true.core/get-name-by-mail (form-init335649229455781063.clj:72).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉brave-and-true.core꞉> 
(defn get-name-by-mail
  [mail]
  ((first (clojure.string/split mail #"@"))))
#'brave-and-true.core/get-name-by-mail
clj꞉brave-and-true.core꞉> 
#'brave-and-true.core/get-name-by-mail
clj꞉brave-and-true.core꞉> 
(get-name-by-mail "nico.@ooi")
; Execution error (ClassCastException) at brave-and-true.core/get-name-by-mail (form-init335649229455781063.clj:81).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉brave-and-true.core꞉> 
(defn get-name-by-mail
  [mail]
  (((clojure.string/split mail #"@"))))
#'brave-and-true.core/get-name-by-mail
clj꞉brave-and-true.core꞉> 
(get-name-by-mail "nico@o")
; Execution error (ArityException) at brave-and-true.core/get-name-by-mail (form-init335649229455781063.clj:92).
; Wrong number of args (0) passed to: clojure.lang.PersistentVector
clj꞉brave-and-true.core꞉> 
(defn get-name-by-mail
  [mail]
  ((clojure.string/split mail #"@")))
#'brave-and-true.core/get-name-by-mail
clj꞉brave-and-true.core꞉> 
(get-name-by-mail "nico@oi")
; Execution error (ArityException) at brave-and-true.core/get-name-by-mail (form-init335649229455781063.clj:101).
; Wrong number of args (0) passed to: clojure.lang.PersistentVector
clj꞉brave-and-true.core꞉> 
(defn get-name-by-mail
  [mail]
  (first (clojure.string/split mail #"@")))
#'brave-and-true.core/get-name-by-mail
clj꞉brave-and-true.core꞉> (get-name-by-mail "nico@oi")
"nico"
clj꞉brave-and-true.core꞉> 
(defn name-surname-tf
  [mail]
  (-> mail
      (clojure.string/split ,,, #"@")
      pop))
#'brave-and-true.core/name-surname-tf
clj꞉brave-and-true.core꞉> 
(name-surname-tf "nicolle.nunes@oi.com")
["nicolle.nunes"]
clj꞉brave-and-true.core꞉> 
(defn name-surname-tf
  [mail]
  (-> mail
      (clojure.string/split #"@")
      (first)
      (clojure.string/split #".")))
#'brave-and-true.core/name-surname-tf
clj꞉brave-and-true.core꞉> 
(name-surname-tf "nicolle.nunes@oi.com")
[]
clj꞉brave-and-true.core꞉> (defn name-surname-tf
                            [mail]
                            (-> mail
                                (clojure.string/split #"@")))
#'brave-and-true.core/name-surname-tf
clj꞉brave-and-true.core꞉> 
(name-surname-tf "nicolle.nunes@oi.com")
["nicolle.nunes" "oi.com"]
clj꞉brave-and-true.core꞉> 
(first ["nicolle.nunes" "oi.com"])
"nicolle.nunes"
clj꞉brave-and-true.core꞉> 
(defn name-surname-tf
  [mail]
  (-> mail
      (clojure.string/split #"@")
      (first)))
#'brave-and-true.core/name-surname-tf
clj꞉brave-and-true.core꞉> (name-surname-tf "nicolle.nunes@oi.com")
"nicolle.nunes"
clj꞉brave-and-true.core꞉> 
(clojure.string/split "nicolle.nunes" #"\\.")
[]
clj꞉brave-and-true.core꞉> (clojure.string/split "nicolle.nunes" #"\\.")
[]
[]
clj꞉brave-and-true.core꞉> 
(clojure.string/split "nicolle.nunes" #"\.")
[]
[]
clj꞉brave-and-true.core꞉> 
(clojure.string/split "nicolle.nunes" #"\.")
["nicolle" "nunes"]
clj꞉brave-and-true.core꞉> (defn name-surname-tf
                            [mail]
                            (-> mail
                                (clojure.string/split #"@")
                                (first)
                                (clojure.string/split #"\.")))
#'brave-and-true.core/name-surname-tf
clj꞉brave-and-true.core꞉> (name-surname-tf "nicolle.nunes@oi.com")
["nicolle" "nunes"]
clj꞉brave-and-true.core꞉> 
(defn name-surname-tf
  [mail]
  (-> mail
      (clojure.string/split #"@")
      (first)
      (clojure.string/split #"\.|_|-")))
#'brave-and-true.core/name-surname-tf
clj꞉brave-and-true.core꞉> (name-surname-tf "nicolle-canuto_nunes.nunes@oi.com")
["nicolle" "canuto" "nunes" "nunes"]
clj꞉brave-and-true.core꞉> 
(defn name-surname
  [mail]
  ((clojure.string/split #"\.|_|-" (first (clojure.string/split mail #"@")))))
#'brave-and-true.core/name-surname
clj꞉brave-and-true.core꞉> (name-surname "nicolle-canuto_nunes.nunes@oi.com")
; Execution error (ClassCastException) at brave-and-true.core/name-surname (form-init335649229455781063.clj:190).
; class java.lang.String cannot be cast to class java.util.regex.Pattern (java.lang.String and java.util.regex.Pattern are in module java.base of loader 'bootstrap')
clj꞉brave-and-true.core꞉> 

(defn name-surname
  [mail]
  ((clojure.string/split (first (clojure.string/split mail #"@")) #"\.|_|-")))
#'brave-and-true.core/name-surname
clj꞉brave-and-true.core꞉> (name-surname "nicolle-canuto_nunes.nunes@oi.com")
; Execution error (ArityException) at brave-and-true.core/name-surname (form-init335649229455781063.clj:199).
; Wrong number of args (0) passed to: clojure.lang.PersistentVector
clj꞉brave-and-true.core꞉> 

(defn name-surname
  [mail]
  (clojure.string/split (first (clojure.string/split mail #"@")) #"\.|_|-"))
#'brave-and-true.core/name-surname
clj꞉brave-and-true.core꞉> (name-surname "nicolle-canuto_nunes.nunes@oi.com")
["nicolle" "canuto" "nunes" "nunes"]
clj꞉brave-and-true.core꞉> 
(defn letting
  [mail]
  (let [full-name (name-surname-tf mail)]
    {:firstname first full-name
     :lastname last full-name}))
#'brave-and-true.core/letting
clj꞉brave-and-true.core꞉> 
(letting "nicolle-canuto_nunes.nunes@oi.com")
{:firstname #function[clojure.core/first--5449],
 ["nicolle" "canuto" "nunes" "nunes"] :lastname,
 #function[clojure.core/last--5493] ["nicolle" "canuto" "nunes" "nunes"]}
clj꞉brave-and-true.core꞉> 
(defn letting
  [mail]
  (let [full-name (name-surname-tf mail)]
    {:firstname (first full-name)
     :lastname (last full-name)}))
#'brave-and-true.core/letting
clj꞉brave-and-true.core꞉> (letting "nicolle-canuto_nunes.nunes@oi.com")
{:firstname "nicolle", :lastname "nunes"}
clj꞉brave-and-true.core꞉> 
